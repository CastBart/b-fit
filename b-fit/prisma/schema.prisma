// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserType {
  PERSONAL
  CLIENT
  PT
  ENTERPRISE
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  accounts              Account[]
  type                  UserType               @default(PERSONAL)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Exercise              Exercise[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// Exercise
enum ExerciseEquipment {
  Cable
  Barbell
  Dumbbells
  Machine
  Bodyweight
  SmithMachine
  TrapBar
  EzBar
  Kettlebells
  ResistanceBands
  TRX
}

enum MuscleGroup {
  Traps
  Front_Delts
  Side_Delts
  Rear_Delts
  Chest
  Upper_Back
  Lats
  Core
  Biceps
  Triceps
  Forearms
  Lower_Back
  Abductors
  Adductors
  Glutes
  Quads
  Hamstrings
  Calves
}

enum ExerciseType {
  Small
  Medium
  Large
}

model Exercise {
  id               String            @id @default(cuid())
  name             String
  equipment        ExerciseEquipment
  primaryMuscle    MuscleGroup
  auxiliaryMuscles MuscleGroup[]     @default([]) // Optional
  exerciseType     ExerciseType
  userId           String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}
